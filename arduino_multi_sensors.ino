#include "arduino_secrets.h"
/*  Sends environmental data from multiple sensors to a Splunk instance  using the statsd protocol.  D. Dessy  Jan 2020*/// Define different log severities#define SEV_INFO 1#define SEV_LOW 2#define SEV_MEDIUM 3#define SEV_HIGH 4#define SEV_CRITICAL 5// Onboard Wifi#include <WiFiNINA.h>#define MAC_LENGTH 6// MKR ENV SD Card#include <SPI.h>#include <SD.h>// change this to match your SD shield or module;const int chipSelect = 4;// Splunk statsd uses UDP#define STATSD_PORT_NUMBER 8125#include <WiFiUdp.h>char splunk_server[] = SECRET_SPLUNK_SERVER; // Splunk server FQDNIPAddress splunk_ip;  // Will hold the current Splunk server IP addressWiFiUDP Udp; // statsd uses UDP// On board RTC#include <RTCZero.h>RTCZero rtc;///////please enter your sensitive data in the Secret tab/arduino_secrets.hchar ssid[] = SECRET_SSID;        // your network SSID (name)char pass[] = SECRET_PASS;        // your network password (use for WPA, or use as key for WEP)int keyIndex = 0;char board_id[ 2 * MAC_LENGTH + 1 ] = ""; // Holds the HEX representation of the MAC address// Sensors list// MKR ENV sensors#include <Arduino_MKRENV.h>const float DELTA_TEMP = 1.6; // Approx. delta of temperature generated by the MKR board itselffloat humidity = 0.0;float pressure = 0.0;float uvb = 0.0;float uvIndex = 0.0;float temperature = 0.0;float illuminance = 0.0;float uva = 0.0;bool mkr_env = false;// Air Quality sensor#include "Air_Quality_Sensor.h"AirQualitySensor air_quality_sensor(A0);bool air_quality = false;// VOC sensorbool air_voc = false;// ---------------------------------void setup() {  Serial.begin(9600);  // Wait for 1mins to see if Serial is connected, otherwise run the Sktech without Serial debugging  int i;  for (i = 0; i < 60; i++) {    if (Serial) break;    delay(1000);  }  configNetwork();  configRtc();  // For send2log() timestamps  getBoardID(board_id);  // Used for sensor unique ID  // Detect available sensors  if (!detectedSensors()) {    send2log(SEV_CRITICAL, "No sensor detected, aborting !");    while (true);  }  send2log(SEV_INFO, "Setup completed.");}void loop() {  int status = 0;  /*    Check for WiFi availability  */  while ( WiFi.status() != WL_CONNECTED) {    send2log(SEV_INFO, "Attempting to reconnect WiFi");    WiFi.begin(ssid, pass);    delay ( 500 );  }  /*    Wifi is there, check if there is a free socket  */  Udp.stop(); // Free up ressources first  status = Udp.begin(STATSD_PORT_NUMBER);  if (status == 0) {    send2log(SEV_HIGH, "No UDP socket available!");    // don't do anything more, have an other try later  }  else {    status = WiFi.hostByName(splunk_server, splunk_ip) ;    if (status == 0) {      send2log(SEV_HIGH, "Cannot resolve server name!");      // don't do anything more, have an other try later    }    else {      readMKR(mkr_env);      readAirQuality(air_quality);      readAirVOC(air_voc);    }  }  delay(60000);}